INIT
0000 0000 0000 0000 // load 0 into A | 0
1110 110000 010 000 // load A into D | 1
0100 0000 0000 0000 // load 16384 into A | 2
1110 111111 001 000 // load 1 into M[A] | 3

--------------------------------------------
IF LED IS ON, JUMP TO 12

0100 0000 0000 0000 // load 16384 into A | 4
1111 110000 010 000 // load M[A] into D | 5
0000 0000 0000 1100 // load 12 into A | 6
1110 001100 000 001 // jump if D is positive | 7

TURN LED ON

0100 0000 0000 0000 // load 16384 into A | 8
1110 111111 001 000 // load 1 into M[A] | 9

JUMP TO 14
0000 0000 0000 1110 | 10
1110 101010 000 111 | 11

TURN LED OFF

0100 0000 0000 0000 // load 16384 into A | 12
1110 101010 001 000 // load 0 into M[A] | 13

--------------------------------------------

WAIT ONE SECOND

// M[2] = 0
0000 0000 0000 0010 // load 2 into A | 14
1110 101010 001 000 // load 0 into M[A] | 15

// M[2]++
0000 0000 0000 0010 // load 2 into A | 16
1111 110111 001 000 // load M[A] + 1 into M[A] | 17

// M[1] = 0
0000 0000 0000 0001 // load 1 into A | 18
1110 101010 001 000 // load 0 into M[A] | 19

// M[1]++
0000 0000 0000 0001 // load 1 into A | 20
1111 110111 001 000 // load M[A] + 1 into M[A] | 21

// if M[1] - 300 < 0, jump to 20
0000 0000 0000 0001 // load 1 into A | 22
1111 110000 010 000 // load M[1] into D | 23
0100 0000 0000 0000 // load 16384 into A | 24
1110 010011 010 000 // load D - A into D | 25
0000 0000 0001 0100 // load 20 into A | 26
1110 001100 000 100 // if D < 0, jump | 27

// if M[2] - 32767 < 0, jump to 16
0000 0000 0000 0010 // load 2 into A | 28
1111 110000 010 000 // load M[2] into D | 29
0000 0001 0000 0000 // load 1024 into A | 30
1110 010011 010 000 // load D - A into D | 31
0000 0000 0001 0000 // load 16 into A | 32
1110 001100 000 100 // if D < 0, jump | 33

BACK TO THE START
0000 0000 0000 0100 | 34
1110 101010 000 111 | 35